
def get_end_point(name, legacy):
    print(name, legacy)

    if not legacy:
        url = 'https://api.gdc.cancer.gov/'
        return url+name
    else:
        return get_legacy_archive(name)

def get_status_ep(legacy = False):
    #Status	Get the API status and version information
    return get_end_point('status', legacy)

def get_projects_ep(legacy = False):
    #Search & Retrieval	Search all data generated by a project
    return get_end_point('projects', legacy)

def get_cases_ep(legacy = False):
    #Search & Retrieval	Find all files related to a specific case, or sample donor.
    return get_end_point('cases', legacy)

def get_files_ep(legacy = False):
    #Search & Retrieval	Find all files with specific characteristics such as file_name, md5sum, data_format and others.
    return get_end_point('files', legacy)

def get_annotations_ep(legacy = False):
    #Search & Retrieval	Search annotations added to data after curation
    return get_end_point('annotations', legacy)

def get_data_ep(legacy = False):
    #Download	Used to download GDC data
    return get_end_point('data', legacy)

def get_manifest_ep(legacy = False):
    #Download	Generates manifests for use with GDC Data Transfer Tool
    return get_end_point('manifest', legacy)

def get_slicing_ep(legacy = False):
    #BAM Allows remote slicing of BAM format objects
    return get_end_point('slicing', legacy)

def get_submission_ep(legacy = False):
    #Returns the available resources at the top level above programs i.e., registered programs
    return get_end_point('submission', legacy)

def get_legacy_archive(name):
    # attach endpoint name
    return 'https://api.gdc.cancer.gov/legacy/' + name

